{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b872276b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport CountUp from 'react-countup'\n\n//CARDS are three visuals to show the number of infected people, the number of recovered people, and the number of deaths. \n//I use material UI components to make this all easier. \n\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\n\n\nimport cx from 'classnames'; //external module \nimport styles from './Cards.module.css';\n//because we only passed one prop in App.js which is \"data\", we need to destructure data specifically\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n\n    if (!confirmed) { //if the data doesn't exist\n        return 'Dilan, it is loading...';\n    }\n    console.log(\"HEYOOO DILAN WE ARE CHECKIGN CONFIRMING\");\n    console.log(confirmed);\n\n    return (\n        <div className={styles.container}>\n\n            <Grid container spacing={3} justify=\"center\">\n                {/* adding size to mobile devices - want to take full length of screen, on med and bigger devices, only 3/12 spaces */}\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    {/* this will give the card the paperlike look -- hovering */}\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={confirmed.value}\n                                duration={2.5}\n                                separator=\",\" //used to specify how we want to separate the number \n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of Active Cases of COVID-19</Typography>\n\n                    </CardContent>\n\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    {/* this will give the card the paperlike look -- hovering */}\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={recovered.value}\n                                duration={2.5}\n                                separator=\",\" //used to specify how we want to separate the number \n                            /></Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of Recoveries from COVID-19</Typography>\n\n                    </CardContent>\n\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    {/* this will give the card the paperlike look -- hovering */}\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={deaths.value}\n                                duration={2.5}\n                                separator=\",\" //used to specify how we want to separate the number \n                            /></Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\n\n                    </CardContent>\n\n                </Grid>\n            </Grid>\n\n        </div>\n    )\n}\n\nexport default Cards;","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n    let changeableUrl = url;\n\n    if (country) {\n        changeableUrl = `${url}/countries/${country}`;\n    }\n\n    try {\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\n\n        return { confirmed, recovered, deaths, lastUpdate };\n    } catch (error) {\n        return error;\n    }\n};\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n\n        return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\n    } catch (error) {\n        return error;\n    }\n};\n\nexport const fetchCountries = async () => {\n    try {\n        const { data: { countries } } = await axios.get(`${url}/countries`);\n\n        return countries.map((country) => country.name);\n    } catch (error) {\n        return error;\n    }\n};","import React, { useState, useEffect } from 'react';\n\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data: { confirmed, deaths, recovered }, country }) => {\n    const [dailyData, setDailyData] = useState([]); //same as state = {dailyData :{}}\n\n    useEffect(() => {\n        //useEffect with async functions -- hard to read. \n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData()); //the return is a promise\n        }\n\n        fetchAPI();\n    }, []);\n\n    const lineChart = (\n        dailyData.length\n            ? (\n                <Line\n                    data={{\n                        //only two datasets b/c API does not offer daily update on deaths\n                        labels: dailyData.map(({ date }) => date),\n                        datasets: [{\n                            data: dailyData.map(({ confirmed }) => confirmed),\n                            label: 'Infected',\n                            borderColor: '#3333ff',\n                            fill: true,\n                        }, {\n                            data: dailyData.map(({ deaths }) => deaths),\n                            label: 'Deaths',\n                            borderColor: 'red',\n                            backgroundColor: 'rgba(255,0,0,0.5)',\n                            fill: true,\n\n                        }],\n                    }}\n                />) : null\n    );\n\n\n    const barChart = (\n        confirmed\n            ? (\n                <Bar\n                    data={{\n                        labels: ['Infected', 'Recovered', 'Deaths'],\n                        datasets: [{\n                            label: 'People',\n                            backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n                            data: [confirmed.value, recovered.value, deaths.value]\n                        }]\n                    }}\n                    options={{\n                        legend: { display: false },\n                        title: { display: true, text: `Current state in ${country}` }\n                    }}\n                />\n            ) : null\n    );\n\n    return (\n        <div className={styles.container}>\n            {/* we want to only show bar chart for individual countries // line graph for global */}\n            {country ? barChart : lineChart}\n\n        </div>\n    )\n}\n\nexport default Chart;","import React, { useState, useEffect } from 'react';\n\nimport { NativeSelect, FormControl } from '@material-ui/core';\n\nimport styles from './CountryPicker.module.css';\n\nimport { fetchCountries } from '../../api';\n\n\n\nconst CountryPicker = ({ handleCountryChange }) => {\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries());\n        }\n\n        fetchAPI();\n    }, [setFetchedCountries]);\n\n    console.log(fetchedCountries);\n    return (\n\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue=\" \" onChange={(e) => handleCountryChange(e.target.value)}>\n                <option value=\"\">Global</option>\n                {/* this dynamically populates all 184 countries  */}\n                {/* I will not keep the state of chosen country in the country picker...will be in App.js */}\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n\n\n\n    )\n}\n\nexport default CountryPicker;","import React from 'react';\n\n// import Cards from './components/Cards/Cards';\n// import Chart from './components/Chart/Chart';\n// import CountryPicker from './components/CountryPicker/CountryPicker';\n\n\n//to make my import statements more efficient, I export my components from index.js -- to make code more readable\nimport { Cards, Chart, CountryPicker } from './components';\n\nimport styles from './App.module.css';\n\nimport { fetchData } from './api';\n\nimport coronaImage from './images/image.png'\n\n\n\n//we are dealing with asynchronous data, so it's easier I think to use class based component\nclass App extends React.Component {\n\n    //don't declare constructor because its unnecessary ... will be created anyways\n    state = {\n        data: {},\n        country: '',\n    }\n\n    async componentDidMount() {\n        const fetchedData = await fetchData();\n        this.setState({ data: fetchedData });\n    }\n\n    handleCountryChange = async (country) => {\n        const fetchedData = await fetchData(country);\n        this.setState({ data: fetchedData, country: country });\n        console.log(fetchedData);\n        console.log(country);\n\n        //fetch the data\n        // set the state\n\n    }\n\n\n\n    render() {\n\n        const { data, country } = this.state;\n\n        return (\n            //since I'm using module for my CSS, instead of saying className = \"container\", I can just do: \n            <div className={styles.container}>\n                <img className={styles.image} src={coronaImage} alt=\"Title picture of COVID-19\" />\n                <Cards data={data} />\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\n                <Chart data={data} country={country} />             </div>\n        )\n    }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}